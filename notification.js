import React,{Component} from 'react';
import PushNotification from 'react-native-push-notification';
import {notificationManager} from './notificationManager';
import alarm from './alarm';
import * as firebase from 'firebase';

if (!firebase.apps.length) {
    firebase.initializeApp({
        apiKey: 'AIzaSyAA8LCkL00jbxYZM2TYjtOYePv74YTjIUw',
        authDomain: 'fir-rn-54022.firebaseapp.com',
        databaseURL: "https://fir-rn-54022.firebaseio.com",
        storageBucket: "fir-rn-54022.appspot.com",
    });
}

const options = {
    soundName: 'default',
    playSound: true,
    viberate: true
}  

export default class notification extends Component{
    constructor(props) {
        super(props)
        this.localNotify = null
    }

    componentDidMount(){
        const med = firebase.database().ref("medicine");
        med.on("value",datasnap=>{
            this.setState({
                medname:datasnap.val().name,
                time:datasnap.val().mytime,
            })
        })
    }

    configure = (onRegister,onNotification,onOpenNotification) => {
        PushNotification.configure({
            onRegister: function (token) {
                onRegister(token)
                console.log("[notificationManager] onRegister token:", token);
            },
            onNotification: function (notification) {
                console.log("[notificationManager] onNotification:", notification);            
                notification.userInteraction = true
                if(notification.userInteraction){
                    onOpenNotification(notification)
                }
                else{
                    onNotification(notification)
                }
                notification.finish('backgroundFetchResultNoData')
              },
        })   
    }

    _buildAndroidNotification = (id,title,message,data={},options={})=> {
        return{
            id: id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            autoCancel: true, // (optional) default: true
            largeIcon: options.largeIcon||"ic_launcher", // (optional) default: "ic_launcher"
            smallIcon: options.smallIcon||"ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: message || "", // (optional) default: "message" prop
            subText: title || "", // (optional) default: none
            vibrate: options.vibrate || true, // (optional) default: true
            vibration: options.vibration || 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            priority: options.priority || "high", // (optional) set notification priority, default: high
            importance: options.importance || "high", // (optional) set notification importance, default: high
            data:data
        }
    }

    showNotification = (id,title,message,data={},options={}) =>{
        PushNotification.localNotification({
            ...this._buildAndroidNotification(id,title,message,data,options),
            title:title || "",
            message : message || '',
            playSound : options.playSound || true,
            soundName : options.soundName || 'default',
            userInteraction:false
        })
    }

    unregister = () =>{
        PushNotification.unregister()
    }

    componentDidMount() {
        this.localNotify = notificationManager
        this.localNotify.configure(this.onRegister,this.onNotification,this.onOpenNotification)
    }

    onRegister(token){
        console.log('[Notification] Registered:',token)
    }

    onNotification(notify){
        console.log('[Notification] onNotification:',notify)
    }

    onOpenNotification(notify){
        console.log('[Notification] onOpenNotification:',notify)
        alert(this.props.alarm)
        .this.localNotify.showNotification(
            1,
            "App Notification",
            "Local Notification",
            {},
            options,
        )
    }  
}

export const notification = new notification();